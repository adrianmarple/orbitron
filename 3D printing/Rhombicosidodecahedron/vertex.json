{
  "settings": {
    "hasHeaders": true,
    "constrainDragToContainer": true,
    "reorderEnabled": true,
    "selectionEnabled": false,
    "popoutWholeStack": false,
    "blockedPopoutsThrowError": true,
    "closePopoutsOnUnload": true,
    "showPopoutIcon": false,
    "showMaximiseIcon": false,
    "showCloseIcon": false,
    "responsiveMode": "onload",
    "tabOverlapAllowance": 0,
    "reorderOnTabMenuClick": true,
    "tabControlOffset": 10
  },
  "dimensions": {
    "borderWidth": 5,
    "borderGrabWidth": 15,
    "minItemHeight": 10,
    "minItemWidth": 10,
    "headerHeight": 20,
    "dragProxyWidth": 300,
    "dragProxyHeight": 200
  },
  "labels": {
    "close": "close",
    "maximise": "maximise",
    "minimise": "minimise",
    "popout": "open in new window",
    "popin": "pop in",
    "tabDropdown": "additional tabs"
  },
  "content": [
    {
      "type": "row",
      "isClosable": true,
      "reorderEnabled": true,
      "title": "",
      "content": [
        {
          "type": "stack",
          "width": 50,
          "isClosable": true,
          "reorderEnabled": true,
          "title": "",
          "activeItemIndex": 0,
          "content": [
            {
              "type": "component",
              "componentName": "codeEditor",
              "title": "* vertex.json",
              "componentState": {
                "code": [
                  "// Welcome to Cascade Studio!   Here are some useful functions:",
                  "//  Translate(), Rotate(), Scale(), Mirror(), Union(), Difference(), Intersection()",
                  "//  Box(), Sphere(), Cylinder(), Cone(), Text3D(), Polygon()",
                  "//  Offset(), Extrude(), RotatedExtrude(), Revolve(), Pipe(), Loft(), ",
                  "//  FilletEdges(), ChamferEdges(),",
                  "//  Slider(), Checkbox(), TextInput(), Dropdown()",
                  "",
                  "let pipe_holder = false",
                  "",
                  "// vertex();",
                  "// // pipe_holder_cuff();",
                  "",
                  "",
                  "let main_vertex = [1, 1, 4.2360679775]",
                  "let u = normalize(main_vertex)",
                  "let e_y = [0,1,0]",
                  "let e_z = [0,0,1]",
                  "",
                  "let adjacent_verticies = [",
                  "  [1, -1, 4.2360679775],",
                  "  [-1, 1, 4.2360679775],",
                  "  [0, 2.61803398875, 3.61803398875],",
                  "  [2.61803398875, 1.61803398875, 3.2360679775],",
                  "]",
                  "",
                  "let gap = 0.5",
                  "let wall_thickness = 1.6",
                  "",
                  "let MIRROR = 1",
                  "",
                  "let socket_radius = 21 // For 1.25\" schedule 40 PVC pipe",
                  "let pipe_holder_depth = 12",
                  "let pipe_holder_thickness = 3",
                  "",
                  "let cube_dims = [10, 6, 31]",
                  "let female_dims = [",
                  "  cube_dims[0] - 2*wall_thickness,",
                  "  cube_dims[1] - wall_thickness,",
                  "  18",
                  "]",
                  "let male_dims = [",
                  "  female_dims[0] - gap*2,",
                  "  female_dims[1] - gap,",
                  "  female_dims[2] - gap",
                  "]",
                  "",
                  "let centerLength = 2*cube_dims[2] * norm(main_vertex) / norm(diff(adjacent_verticies[0], main_vertex))",
                  "console.log(\"Center length: \" + centerLength)",
                  "",
                  "// module pipe_holder_cuff() {",
                  "//   difference() {",
                  "//     cylinder(r=socket_radius + 2*pipe_holder_thickness, h=pipe_holder_depth + pipe_holder_thickness - 1);",
                  "",
                  "//     cylinder(r=socket_radius+0.5, h=100);",
                  "",
                  "//     translate([0, 0, pipe_holder_thickness])",
                  "//     cylinder(r=socket_radius + pipe_holder_thickness + 1, h=100);",
                  "//   }",
                  "// }",
                  "",
                  "let edges = []",
                  "let edge_negatives = []",
                  "for (let i = 0; i < 4; i++) {",
                  "  let v = adjacent_verticies[i]",
                  "  let e = div(diff(v, main_vertex), 2)",
                  "  let xy = [e[0], e[1], 0]",
                  "  let a0 = Math.acos(dot(xy, e_y) / norm(xy)) * (e[0] < 0 ? 1:-1) * 180 /Math.PI ",
                  "  ",
                  "  let c = cross(e_z, e)",
                  "  let a1 = Math.asin(norm(c)) * 180 /Math.PI ",
                  "  ",
                  "  let o_p1 = normalize(diff(u,  mult(e, dot(u, e))))",
                  "  let o_p2 = normalize(diff(e_z,  mult(e, dot(e_z, e))))",
                  "  let a2 = Math.acos(dot(o_p1, o_p2)) * (e[0] < 0 ? -1:1) * 180 /Math.PI ",
                  "",
                  "  let male = i%2 == MIRROR",
                  "  let edge = Translate([-cube_dims[0]/2, 0, 0], BoxFromV(cube_dims))",
                  "  if (male) {",
                  "    let maleBit = BoxFromV(male_dims)",
                  "    maleBit = Translate([",
                  "            -male_dims[0]/2,",
                  "            cube_dims[1] - male_dims[1],",
                  "            cube_dims[2]",
                  "        ], maleBit)",
                  "    edge = Union([edge, maleBit])",
                  "  } else {",
                  "    let femaleBit = BoxFromV(female_dims)",
                  "    femaleBit = Translate([",
                  "            -female_dims[0]/2,",
                  "            cube_dims[1] - female_dims[1],",
                  "            cube_dims[2] - female_dims[2]",
                  "        ], femaleBit)",
                  "    edge = Difference(edge, [femaleBit])",
                  "  }",
                  "  edge = Rotate([0,0,1], a2 + a0 + 180, edge)",
                  "  edge = Rotate(c, a1, edge)",
                  "  edges.push(edge)",
                  "",
                  "  let edge_negative = Translate([-cube_dims[0]/2, -cube_dims[1], 0], BoxFromV(cube_dims))",
                  "  edge_negative = Rotate([0,0,1], a2 + a0 + 180, edge_negative)",
                  "  edge_negative = Rotate(c, a1, edge_negative)",
                  "  edge_negatives.push(edge_negative)",
                  "}",
                  "",
                  "let vertex = Difference(Union(edges), edge_negatives)",
                  "let a = -Math.atan2(Math.sqrt(2), main_vertex[2]) * 180 / Math.PI",
                  "vertex = Rotate([1,-1,0], a, vertex)",
                  "",
                  "",
                  "function diff(v1, v2) {",
                  "  return [",
                  "    v1[0] - v2[0],",
                  "    v1[1] - v2[1],",
                  "    v1[2] - v2[2],",
                  "  ]",
                  "}",
                  "function div(vector, scalar) {",
                  "  return [",
                  "    vector[0] / scalar,",
                  "    vector[1] / scalar,",
                  "    vector[2] / scalar,",
                  "  ]",
                  "}",
                  "function mult(vector, scalar) {",
                  "  return [",
                  "    vector[0] * scalar,",
                  "    vector[1] * scalar,",
                  "    vector[2] * scalar,",
                  "  ]",
                  "}",
                  "",
                  "function dot(v1, v2) {",
                  "  return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2]",
                  "}",
                  "function norm(vector) {",
                  "  return Math.sqrt(dot(vector, vector))",
                  "}",
                  "function normalize(vector) {",
                  "  return div(vector, norm(vector))",
                  "}",
                  "function cross(v1, v2) {",
                  "  return [",
                  "    v1[1]*v2[2] - v1[2]*v2[1],",
                  "    v1[2]*v2[0] - v1[0]*v2[2],",
                  "    v1[0]*v2[1] - v1[1]*v2[0],",
                  "  ]",
                  "}",
                  "",
                  "function BoxFromV(vector) {",
                  "  return Box(vector[0], vector[1], vector[2])",
                  "}"
                ]
              },
              "width": 50,
              "isClosable": false,
              "reorderEnabled": true
            }
          ]
        },
        {
          "type": "column",
          "isClosable": true,
          "reorderEnabled": true,
          "title": "",
          "width": 50,
          "content": [
            {
              "type": "stack",
              "height": 80,
              "isClosable": true,
              "reorderEnabled": true,
              "title": "",
              "activeItemIndex": 0,
              "content": [
                {
                  "type": "component",
                  "componentName": "cascadeView",
                  "title": "CAD View",
                  "componentState": {
                    "componentName": "cascadeView",
                    "MeshRes": 0.01,
                    "Cache?": true,
                    "GroundPlane?": false,
                    "Grid?": true,
                    "Radius": 34.57
                  },
                  "isClosable": false,
                  "reorderEnabled": true
                }
              ]
            },
            {
              "type": "stack",
              "height": 20,
              "isClosable": true,
              "reorderEnabled": true,
              "title": "",
              "activeItemIndex": 0,
              "content": [
                {
                  "type": "component",
                  "componentName": "console",
                  "title": "Console",
                  "componentState": {},
                  "height": 20,
                  "isClosable": false,
                  "reorderEnabled": true
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "isClosable": true,
  "reorderEnabled": true,
  "title": "",
  "openPopouts": [],
  "maximisedItemId": null
}